\chapter{Testing}

% Detailed descriptions of every test case are definitely not what is required here. What is important is to show that you adopted a sensible strategy that was, in principle, capable of testing the system adequately even if you did not have the time to test the system fully.

% Have you tested your system on 'real users'? For example, if your system is supposed to solve a problem for a business, then it would be appropriate to present your approach to involve the users in the testing process and to record the results that you obtained. Depending on the level of detail, it is likely that you would put any detailed results in an appendix.

\section{Overall Approach to Testing}
\label{testing-intro}
% tests inherited from parent project - none!
Usually, tests can be inherited alongside features from parent codebases. However, IDFind had no automated tests. This was a factor in some decisions, such as dropping certain features where limited development time is mentioned. A good example is IDFind's Twitter integration mentioned in \myref{design-changes}. Writing any sensible test coverage for an external service \emph{from scratch} would have taken up valuable time which was used for more important features.

All testing except the user testing has been automated (with the exception of the usual develop-test-develop feedback loop). It turned out Test-Driven Development can only be applied when a certain level of knowledge of the target domain and the technology is readily available - otherwise there is simply not enough information about how the application is supposed to function in order to write the tests first. Thus, the conventional development loop was used.

% pretty much the same content being tested in different ways
% so have unit and integration tests
% integration asserted content -> selenium for automated UI testing
% integration asserted content -> mechanize for automated stress testing

\section{Automated Testing}

\subsection{Unit Tests}
Since IDFind left no tests whatsoever, the most important modules of the system were tested - |core|, |dao|, |importer|. The |web| module was tested sufficiently by the integration tests.

|util| was also tested, although |config| was not due to its nature. It would be pretty obvious if it did not work since the application would not run at all. 

Only |rcuk_esrc| was tested from the Funding Harvest project since it is the only module which contains code beyond placeholder infrastructure (see \myref{design-fundingharvest-base}).

\subsection{Functional / Integration Tests}
% automated integration testing - after unit tests have succeeded, tests paths of functionality that use multiple modules
Integration tests were entirely separate from the codebase in the sense that they did not directly import any of the code being tested. They targeted the API routes described in \myref{design-web} and as such, mostly provided coverage for the otherwise untested |web| module, while also testing whether it would properly call upon everything else in the system to do serve appropriate results. The integration tests also test the API, e.g. whether JSON is being served when requested.

\subsection{User Interface Testing}
User interface testing was performed manually each time the interface was changed. Selenium IDE \cite{selenium} could be used to automate this testing, but testing the Javascript part (i.e. facetview) would require a quarter of the hours allocated to the software development part of this project in the first place, even if only due to lack of familiarity with the Selenium framework.

\subsection{Stress Testing}
Stress testing could be done using the multi-mechanize \cite{multi-mechanize} suite. However, time constraints and the low priority of such tests preclude this for the moment, although the suite was investigated.

%\subsection{Other types of testing}

%\section{User Testing}
% TODO WORK tested with candidate PG-s, PG-s, Postdocs, Lecturers, Developers

\section{Responsive Mobile Web Design}
\label{testing-mobile}
The application was not tested on different devices, but relied on the Bootstrap framework to perform as expected of such a popular user interface framework, which it will probably do better than the less-than-experienced in responsive web design author. It was tested on a 2013 HTC Desire X device running the latest version of mobile Firefox. The device has a 4in. screen and runs a relatively recent version of the Android mobile operating system - 4.0, and is as such not particularly representative of the mobile device market.